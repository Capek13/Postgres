$ initdb --locale=C -E UTF-8 /usr/local/opt/postgresql@17
$ brew services start postgresql@17
$ brew services list
$ brew services stop postgresql@17
$ brew info postgresql@17
$ brew doctor
$ brew link postgresql

$ which initdb

$ psql -U $(whoami) -d postgres



CREATE TABLE IF NOT EXISTS student (
	student_id SERIAL PRIMARY KEY,
	username VARCHAR(128) NOT NULL
);

DROP TABLE IF EXISTS student;

CREATE TAbLE student (
	student_id serial PRIMARY KEY,
	username VARCHAR (128) UNIQUE NOT NULL,
	password VARCHAR (128) NOT NULL,
	is_new BOOLEAN,
	year_born INTEGER NOT NULL,
	created_on TIMESTAMP NOT NULL,
	updated_on TIMESTAMP
);

DROP TABLE IF EXISTS Student;

CREATE TAbLE "Student" (
	student_id serial PRIMARY KEY,
	"Username" VARCHAR (128) UNIQUE NOT NULL,
	password VARCHAR (128) NOT NULL,
	is_new BOOLEAN,
	year_born INTEGER NOT NULL,
	created_on TIMESTAMP NOT NULL,
	updated_on TIMESTAMP
);

DROP TABLE IF EXISTS "Student";

CreaTe TaBle StuDent (
	sTudEnt_id SEriAl PRIMaRY KeY
);






PART 2 

CREATE TABLE IF NOT EXISTS public.student (
	student_id SERIAL PRIMARY KEY,
	username VARCHAR(128) NOT NULL
);

INSERT INTO student(username, "password", is_new, year_born, created_on, updated_on)
VALUES ('Michal', 'helso', TRUE , 1996, '2021-01-01 19:20:25-07' , '2021-01-01 19:20:25-07');

INSERT INTO student(student_id,username, "password", is_new, year_born, created_on, updated_on)
VALUES ('Marketa', 'helso', TRUE , 1996, '2021-01-01 19:20:25-07' , '2021-01-01 19:20:25-07');

CREATE TABLE "Employee" 
(
	"EmployeeId" INT NOT NULL,
	"LastName" VARCHAR(20) NOT NULL, 
	"Title" VARCHAR(30),
	CONSTRAINT "PK_Employee" PRIMARY KEY ("EmployeeId")
);





SELECT "Name","Milliseconds"
FROM "Track"

SELECT "Bytes","Milliseconds",CAST("Bytes" AS DECIMAL)/"Milliseconds", "Bytes"+"Milliseconds"
FROM "Track"

SELECT "Name" AS x, "Milliseconds"
FROM "Track"

SELECT "Name" x, "Milliseconds"
FROM "Track"

SELECT "Name" , "Composer" , "Name"|| '' || "Composer"
FROM "Track"

SELECT "Name" , "Composer" , "Name"|| '' || "Composer" as concatenation
FROM "Track"


SELECT DISTINCT "AlbumId"
FROM "Track"

SELECT DISTINCT "AlbumId", "MediaTypeId"
FROM "Track"



SELECT "Name", "Bytes"
FROM "Track"
ORDER BY "Bytes"¨

SELECT "Name", "Bytes"
FROM "Track"
ORDER BY "Bytes" DESC

SELECT "Name", "Bytes","Milliseconds"
FROM "Track"
ORDER BY "Bytes" , "Milliseconds" DESC

SELECT "Name", "Bytes","Milliseconds"
FROM "Track"
ORDER BY "Bytes" DESC , "Milliseconds" DESC

SELECT "Name", "Bytes" , "AlbumId"
FROM "Track"
ORDER BY "AlbumId" DESC, "Bytes" DESC

SELECT "Name", "Milliseconds", ("Milliseconds"/1000)/60::decimal minutes
FROM "Track"


SQL řadí příkazy v tomto pořadí : FROM -> SELECT -> ORDER BY


SELECT "Name", "Bytes", "AlbumId"
FROM "Track"
WHERE "Bytes" > 5000000 AND "Bytes" < 6000000
ORDER BY "Bytes" DESC

SELECT "Name", "Bytes", "AlbumId"
FROM "Track"
WHERE "AlbumId" IN (1,2)

SELECT "Name", "Bytes", "AlbumId"
FROM "Track"
WHERE "AlbumId" NOT IN (1,2)


SELECT "Name", LENGTH("Name") as name_lenght
FROM "Track"
WHERE LENGTH("Name" > 5)

SELECT "Name"
FROM "Track"
WHERE "Name" LIKE 'F%'

"" - názvy sloupečků
'' - string

SELECT "Name"
FROM "Track"
WHERE "Name" ILIKE 'F%' - velké i malé písmena


NEPOUZIVAT '%the%' - NEEFEKTIVNI !!! - hledání the uprostřed stringu (% na začátkunení dobrý (indexovani)!)


SELECT *
FROM "Track"
LIMIT 5
OFFSET 3 

-- komentář 


SELECT "Name", ROUND("Milliseconds"::DECIMAL/60000, 2) "Minutes"
FROM "Track"
WHERE ("Milliseconds"/60000.0) < 5.0
ORDER BY "Milliseconds" DESC 
LIMIT 10


SELECT DISTINCT "Composer"
FROM "Track"
WHERE LENGTH("Composer") BETWEEN 8 AND 15
ORDER BY "Composer"
LIMIT 2


FETCH NEXT – specifikuje počet řádků, které se mají vrátit. 

C.R.U.D - sada funkcí
CREATE
READ
UPDATE
DELET


ALTER TABLE "Customer"
RENAME TO customer


ALTER TABLE "customer"
RENAME COLUMN "CustomerId" TO customer_id

SELECT *
FROM cusotmer

UPDATE customer
SET 	"FirstName" = 'Someone',
	"LastName" = 'Someone'
WHERE customer_id = 2

UPDATE customer
SET 	"FirstName" = 'Someone',
	"LastName" = 'Someone'
WHERE customer_id < 3


SELECT * 
FROM information_schema.columns



SELECT column_name
FROM information_schema.columns
WHERE table_schema ='public' AND table_name='customer'

ALTER TABLE customer
ADD COLUMN  test_column VARCHAR(256)




ALTER TABLE customer
ADD COLUMN  test_column_not_null VARCHAR(256);

UPDATE customer
SET test_column_not_null = 'X';

ALTER TABLE customer
ALTER COLUMN  test_column_not_null SET NOT NULL;


DELETE FROM "Track"
WHERE "MediaTypeId" = 2

DELETE FROM "Track"
WHERE "MediaTypeId" = 3
RETURNING *;
		- může se hodit pro některé backendové použití


DELETE FROM "Track"



CREATE TABLE car (
	car_id SERIAL PRIMARY KEY,
	brand VARCHAR(64)
);

INSERT INTO car (brand) VALUES ('BMW');
DELETE FROM car
INSERT INTO car (brand) VALUES ('MG');

TRUNCATE TABLE car RESTART IDENTITY  - vynuluje klíč


TRUNCATE TABLE - rychlejší než DELETE FROM ( doplnit info) funguje na principu transakci v SQL 


ER Diagram -entitno relační diagram
Primary key
Foregion key

ALTER TABLE "Invoice" ADD CONSTRAINT "FK_InvoiceCustomer"
	FOREIGN KEY("CustomerId") REFERENCES "Customer" ("CustomerId") ON DELETE SET NULL

- další možnosti
	FOREIGN KEY("CustomerId") REFERENCES "Customer" ("CustomerId") ON DELETE NO ACTION
	FOREIGN KEY("CustomerId") REFERENCES "Customer" ("CustomerId") ON DELETE CASCADE - maže kaskádově
	FOREIGN KEY("CustomerId") REFERENCES "Customer" ("CustomerId") ON DELETE NO ACTION ON UPDATE NO ACTION

"FK_InvoiceCustomer"
	FK - foregion key 
	Invoice - tabulka do která má cizí klíč
	Custome - tabulka kam odkazuje cizí klíč

DELETE FROM "Customer" WHERE "CustomerId" = 1;  - hodí error

ALTER TABLE car 
	DROP CONSTRAINT  fk_customer, 
	ADD CONSTRAINT fk_customer
		FOREIGN KEY (customer_id) REFERENCES "Customer"("CustomerId") ON DELETE CASCADE ON UPDATE
	
- následně jde smazat


SELECT *
FROM table1
INNER JOIN  table2
	ON table1.username=test2.username

- vrati prunik hodnot které se nachazí v obou tabulkách (id1 miso == id4 miso)

SELECT *
FROM test1
LEFT JOIN test2
	ON test1.username=test2.username 
- vratí prunik hodnot a ostatní v 1. tabulce

SELECT *
FROM test1
RIGHT JOIN test2
	ON test1.username=test2.username 

- vratí prunik hodnot a ostatní v 2. tabulce

SELECT *
FROM test1
FULL OUTER JOIN test2
ON test1.username=test2.username
- namapovaná tabulka 1 na tabulku 2 a navic zbytek zleva s hdonotou null a zbytek z prava s hodnotou null

SELECT *
FROM test1
CROSS JOIN test2
- namapuje vsechny hodnoty z 1. tabulky na všechny hodnoty 2. tabulky = vysledný počet prvků bude n.prvniTabulky*n.druheTabulky (kombinace)

SELECT *
FROM test1
UNION
SELECT *
FROM test2
- výstupem všechny řádky obou tabulek nahohodně za sebou ( překlad sjednocení)

SELECT *
FROM test1
INTERSECT
SELECT *
FROM test2 
- vypíše průnik tabulek ( id1==id2 and username1==username2)

SELECT username
FROM test1
INTERSECT
SELECT username
FROM test2 
- vypíše průnik množin username ( username1==username2)

SELECT *
FROM test1
EXCEPT
SELECT *
FROM test2 
ORDR BY username_id_test1
- vypíše zbytek z pruniku tabulke ( d1!=id2 and username1!=username2)

SELECT COUNT *
FROM "Invoice" 
- počet řádků


Kdo zaplatil největší částku

SELECT *
FROM "Invoice"
ORDER BY "Total"DESC


SELECT "Invoice""CustomerId","Total"
FROM "Inovice"
JOIN "Customer"
	ON "Invoice"."CustomerId" = "Customer"."CustomerId"

SELECT *
FROM "Inovice"
JOIN "Customer"
	ON "Invoice"."CustomerId" = "Customer"."CustomerId"

SELECT inv."Total",  cust."FirstName", cust."LastName"
FROM "Inovice" as inv
JOIN "Customer" as cust
	ON inv."CustomerId" = cust."CustomerId"
ORDER BY inv."Total" DESC
LIMIT 1
- s join se casto pouziva alias , pokud ma tabulka stejný nazav sloupcu tak postgres nevi co chci za sloup



kolik zaplatila hlena clekem

SELECT SUM(inv."Total")
FROM "Inovice" as inv
JOIN "Customer" as cust
	ON inv."CustomerId" = cust."CustomerId"
WHERE cust."FirstName"='Helena'



GROP BY

SPLIT ->APLLY -> COMBINE

SELECT "GendreId"
FROM "Track"
GROUP BY "GenderId" 
- pokud nedám do SELECT agregační funkci tak se vypíší všechny hdonoty jedenkrát


SELECT "GendreId", COUNT (*)
FROM "Track"
WHERE "Bytes" > 8000000
GROUP BY "Gendre Id"



- pořádí vykonávání funkcí v SQL (NEJDE IGNOROVAT)
FROM -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER -> LIMIT




- kolko stoji 2 nejdražší albua pokud chci koupit všechny skladby v nich

SELECT "AlbumId", "Name", SUM("UnitPrice") as total_price
FROM "Track"
GROUP BY "AlbumId"
ORDER BY total_price DESC
	LIMIT 2

-- vyfiltruj alba , kde je suma cen větší než 8
SELECT "AlbumId", "Name", SUM("UnitPrice") as total_price
FROM "Track"
GROUP BY "AlbumId"
	HAVING SUM("UnitPrice") > 8


SELECT *
FROM "Track"
GROUP BY "GenreId", "AlbumId"
- kombinace všech alb a gendru

SELECT "GenreId", "AlbumId" , COUNT(*)
FROM "Track"
GROUP BY "GenreId", "AlbumId"


GROUP BY více sloupečků: ... 

- kolik stojí jednotlivé kombinace alb a zanru (nevyzkoušeno)
SELECT "GenreId", "AlbumId" , SUM("UnitPrice") as total_price
FROM "Track"
GROUP BY "GenreId", "AlbumId"
	





	
